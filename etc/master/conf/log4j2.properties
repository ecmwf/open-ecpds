#
# File log4j2.properties
#
# Purpose: log customization file for the OpenECPDS Master Server
#
# (c) Copyright ECMWF 2021 - Laurent Gougeon
#

# Name of the configuration
name = PropertiesConfig

# Internal Log4j events that should be logged to the console
#
status = error
dest = err

# Automatically detect changes to this file (in seconds)
#
monitorInterval = 30

# Declaration of all appenders
#
appenders = request,operator,event,metrics,splunk,master,hibernate,console

# Define the ECpdsRequestFile appender (ECpdsRequest class)
#
appender.request.type = RollingFile
appender.request.name = ECpdsRequestFile
appender.request.fileName = ${sys:master.log}/request.log
appender.request.filePattern = ${sys:master.log}/request.log.%d{${sys:log.rollover.date.pattern:-dd-MM-yyyy}}
appender.request.layout.type = PatternLayout
appender.request.layout.pattern = %m%n
appender.request.policies.type = Policies
appender.request.policies.time.type = TimeBasedTriggeringPolicy
appender.request.policies.time.interval = 1
appender.request.policies.time.modulate = true
appender.request.strategy.type = DefaultRolloverStrategy
appender.request.strategy.action.type = Delete
appender.request.strategy.action.basepath = ${sys:master.log}
appender.request.strategy.action.maxdepth = 1
appender.request.strategy.action.condition.type = IfLastModified
appender.request.strategy.action.condition.age = ${sys:log.rollover.date.keep:-5d}
appender.request.strategy.action.PathConditions.type = IfFileName
appender.request.strategy.action.PathConditions.glob = request.log.*

# Define the OperatorFile appender (TransferScheduler class)
#
appender.operator.type = RollingFile
appender.operator.name = OperatorFile
appender.operator.fileName = ${sys:master.log}/operator.log
appender.operator.filePattern = ${sys:master.log}/operator.log.%d{${sys:log.rollover.date.pattern:-dd-MM-yyyy}}
appender.operator.layout.type = PatternLayout
appender.operator.layout.pattern = [%d{dd/MM/yyyy HH:mm:ss}] %m%n
appender.operator.policies.type = Policies
appender.operator.policies.time.type = TimeBasedTriggeringPolicy
appender.operator.policies.time.interval = 1
appender.operator.policies.time.modulate = true
appender.operator.strategy.type = DefaultRolloverStrategy
appender.operator.strategy.action.type = Delete
appender.operator.strategy.action.basepath = ${sys:master.log}
appender.operator.strategy.action.maxdepth = 1
appender.operator.strategy.action.condition.type = IfLastModified
appender.operator.strategy.action.condition.age = ${sys:log.rollover.date.keep:-5d}
appender.operator.strategy.action.PathConditions.type = IfFileName
appender.operator.strategy.action.PathConditions.glob = operator.log.*

# Define the EventFile appender
#
appender.event.type = RollingFile
appender.event.name = EventFile
appender.event.fileName = ${sys:master.log}/event.log
appender.event.filePattern = ${sys:master.log}/event.log.%d{${sys:log.rollover.date.pattern:-dd-MM-yyyy}}
appender.event.layout.type = PatternLayout
appender.event.layout.pattern = [%d{dd/MM/yyyy HH:mm:ss,SSS}] %-5p [%t] %x %m%n
appender.event.policies.type = Policies
appender.event.policies.time.type = TimeBasedTriggeringPolicy
appender.event.policies.time.interval = 1
appender.event.policies.time.modulate = true
appender.event.strategy.type = DefaultRolloverStrategy
appender.event.strategy.action.type = Delete
appender.event.strategy.action.basepath = ${sys:master.log}
appender.event.strategy.action.maxdepth = 1
appender.event.strategy.action.condition.type = IfLastModified
appender.event.strategy.action.condition.age = ${sys:log.rollover.date.keep:-5d}
appender.event.strategy.action.PathConditions.type = IfFileName
appender.event.strategy.action.PathConditions.glob = event.log.*

# Define the MetricsFile appender (TransferScheduler class)
#
appender.metrics.type = RollingFile
appender.metrics.name = MetricsFile
appender.metrics.fileName = ${sys:master.log}/metrics.log
appender.metrics.filePattern = ${sys:master.log}/metrics.log.%d{${sys:log.rollover.date.pattern:-dd-MM-yyyy}}
appender.metrics.layout.type = PatternLayout
appender.metrics.layout.pattern = [%d{dd/MM/yyyy HH:mm:ss}] %m%n
appender.metrics.policies.type = Policies
appender.metrics.policies.time.type = TimeBasedTriggeringPolicy
appender.metrics.policies.time.interval = 1
appender.metrics.policies.time.modulate = true
appender.metrics.strategy.type = DefaultRolloverStrategy
appender.metrics.strategy.action.type = Delete
appender.metrics.strategy.action.basepath = ${sys:master.log}
appender.metrics.strategy.action.maxdepth = 1
appender.metrics.strategy.action.condition.type = IfLastModified
appender.metrics.strategy.action.condition.age = ${sys:log.rollover.date.keep:-5d}
appender.metrics.strategy.action.PathConditions.type = IfFileName
appender.metrics.strategy.action.PathConditions.glob = metrics.log.*

# Define the SplunkFile appender
#
appender.splunk.type = RollingFile
appender.splunk.name = SplunkFile
appender.splunk.fileName = ${sys:master.log}/splunk.log
appender.splunk.filePattern = ${sys:master.log}/splunk.log.%d{${sys:log.rollover.date.pattern:-dd-MM-yyyy}}
appender.splunk.layout.type = PatternLayout
appender.splunk.layout.pattern = %m%n
appender.splunk.policies.type = Policies
appender.splunk.policies.time.type = TimeBasedTriggeringPolicy
appender.splunk.policies.time.interval = 1
appender.splunk.policies.time.modulate = true
appender.splunk.strategy.type = DefaultRolloverStrategy
appender.splunk.strategy.action.type = Delete
appender.splunk.strategy.action.basepath = ${sys:master.log}
appender.splunk.strategy.action.maxdepth = 1
appender.splunk.strategy.action.condition.type = IfLastModified
appender.splunk.strategy.action.condition.age = ${sys:log.rollover.date.keep:-5d}
appender.splunk.strategy.action.PathConditions.type = IfFileName
appender.splunk.strategy.action.PathConditions.glob = splunk.log.*

# Define the MasterFile appender (general purpose)
#
appender.master.type = RollingFile
appender.master.name = MasterFile
appender.master.fileName = ${sys:master.log}/master.log
appender.master.filePattern = ${sys:master.log}/master.log.%i
appender.master.layout.type = PatternLayout
appender.master.layout.pattern = [%d{dd/MM/yyyy HH:mm:ss,SSS}] %-5p [%t] [%c{2}] %x %m%n
appender.master.policies.type = Policies
appender.master.policies.size.type = SizeBasedTriggeringPolicy
appender.master.policies.size.size = ${sys:log.rollover.size.max:-100MB}
appender.master.strategy.type = DefaultRolloverStrategy
appender.master.strategy.fileIndex = min
appender.master.strategy.max = ${sys:log.rollover.size.keep:-100}

# Define the HibernateFile appender
#
appender.hibernate.type = RollingFile
appender.hibernate.name = HibernateFile
appender.hibernate.fileName = ${sys:master.log}/hibernate.log
appender.hibernate.filePattern = ${sys:master.log}/hibernate.log.%i
appender.hibernate.layout.type = PatternLayout
appender.hibernate.layout.pattern = [%d{dd/MM/yyyy HH:mm:ss,SSS}] %-5p [%t] [%C] %x %m%n
appender.hibernate.policies.type = Policies
appender.hibernate.policies.size.type = SizeBasedTriggeringPolicy
appender.hibernate.policies.size.size = ${sys:log.rollover.size.max:-100MB}
appender.hibernate.strategy.type = DefaultRolloverStrategy
appender.hibernate.strategy.fileIndex = min
appender.hibernate.strategy.max = ${sys:log.rollover.size.keep:-100}

# Define the MasterToConsole appender
#
appender.console.type = Console
appender.console.name = MasterToConsole
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = [%d{dd/MM/yyyy HH:mm:ss,SSS}] %-5p [%t] [%c{2}] %x %m%n
appender.console.filter.threshold.type = ThresholdFilter
appender.console.filter.threshold.level = ${sys:log.console.threshold.level:-off}

# Declaration of all loggers
#
loggers = request,operator,event,metrics,splunk,hibernate,ecmwf

# Define the RequestLogs logger
#
logger.request.name = ECpdsRequestLogs
logger.request.level = ${sys:log.request.level:-info}
logger.request.additivity = false
logger.request.appenderRef.request.ref = ECpdsRequestFile

# Define the OperatorLogs logger
#
logger.operator.name = OperatorLogs
logger.operator.level = ${sys:log.operator.level:-info}
logger.operator.additivity = false
logger.operator.appenderRef.operator.ref = OperatorFile

# Define the EventLogs logger
#
logger.event.name = EventLogs
logger.event.level = ${sys:log.event.level:-info}
logger.event.additivity = false
logger.event.appenderRef.event.ref = EventFile

# Define the MetricsLogs logger
#
logger.metrics.name = MetricsLogs
logger.metrics.level = ${sys:log.metrics.level:-info}
logger.metrics.additivity = false
logger.metrics.appenderRef.metrics.ref = MetricsFile

# Define the SplunkLogs logger
#
logger.splunk.name = SplunkLogs
logger.splunk.level = ${sys:log.splunk.level:-info}
logger.splunk.additivity = false
logger.splunk.appenderRef.splunk.ref = SplunkFile

# Define the hibernate logger
#
logger.hibernate.name = org.hibernate.SQL
logger.hibernate.level = ${sys:log.hibernate.level:-info}
logger.hibernate.additivity = false
logger.hibernate.appenderRef.master.ref = HibernateFile

# Define the ecmwf logger (ecmwf)
#
logger.ecmwf.name = ecmwf
logger.ecmwf.level = ${sys:log.ecmwf.level:-warn}
logger.ecmwf.additivity = false
logger.ecmwf.includeLocation = ${sys:log.ecmwf.includeLocation:-false}
logger.ecmwf.appenderRef.master.ref = MasterFile
logger.ecmwf.appenderRef.console.ref = MasterToConsole

# Define the root logger (everything)
#
rootLogger.level = ${sys:log.root.level:-error}
rootLogger.appenderRef.master.ref = MasterFile
rootLogger.appenderRef.console.ref = MasterToConsole
