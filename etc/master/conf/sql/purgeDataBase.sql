##
## References
##
#menu "ECpdsBase"
#name "purgeDataBase"
#group "update"

##
## Variable(s)
##
#prompt "currentTimeMillis;Current Time in Milliseconds;;long"
#prompt "currentTime;Current time;%;java.sql.Timestamp"
#prompt "purgeDate;Purge date;%;java.sql.Date"
#prompt "purgeTime;Purge time;%;java.sql.Time"
##
## These values are currently not used in this sql script but
## could be useful (e.g. if we cannot rely on the current
## time in the database).

##
## Request(s)
##
CHUNK 1000 UPDATE DATA_TRANSFER SET DAT_DELETED = '1'
  WHERE DAT_ID IN (
    SELECT DAT_ID FROM DATA_TRANSFER
    WHERE NOT DAT_DELETED<>0
    AND NOT STA_CODE = 'EXEC'
    AND DAT_EXPIRY_TIME < $currentTimeMillis
);

CHUNK 1000 UPDATE DATA_TRANSFER SET DAT_DELETED = '1'
  WHERE DAT_ID IN (
    SELECT DAT_ID FROM DATA_TRANSFER DAT, DATA_FILE DAF
    WHERE DAT.DAF_ID = DAF.DAF_ID
    AND NOT DAT_DELETED<>0
	AND DAF_DELETED<>0
);

CHUNK 1000 UPDATE UPLOAD_HISTORY SET DAT_ID = NULL
  WHERE UPH_ID IN (
    SELECT UPH_ID FROM UPLOAD_HISTORY UPH, DATA_TRANSFER DAT
    WHERE UPH.DAT_ID = DAT.DAT_ID
	AND DAT_DELETED<>0
);

CHUNK 1000 UPDATE INCOMING_HISTORY SET DAT_ID = NULL
  WHERE INH_ID IN (
    SELECT INH_ID FROM INCOMING_HISTORY INH, DATA_TRANSFER DAT
    WHERE INH.DAT_ID = DAT.DAT_ID
	AND DAT_DELETED<>0
);

CHUNK 1000 UPDATE DATA_FILE SET DAF_DELETED = '1'
  WHERE DAF_ID IN (
    SELECT DAF_ID FROM DATA_FILE
    WHERE NOT DAF_DELETED<>0
    AND DAF_ARRIVED_TIME < $currentTimeMillis
    AND NOT DAF_ID IN (
      SELECT DAF_ID
      FROM DATA_TRANSFER
      WHERE NOT DAT_DELETED<>0)
);

##
## Delete the TransferHistory which have an
## expiration date which is less than one
## hour (acquisition) or which are more
## than 7 days after being queued (the interface
## only shows the last 7 days)
##
CHUNK 1000 DELETE FROM TRANSFER_HISTORY
  WHERE TRH_ID IN (
    SELECT TRH_ID FROM TRANSFER_HISTORY TRH, DATA_TRANSFER DAT
	WHERE TRH.DAT_ID = DAT.DAT_ID
	AND DAT_DELETED<>0
    AND ((DAT_EXPIRY_TIME - DAT_SCHEDULED_TIME) < (60*60*1000)
      OR ($currentTimeMillis - DAT_QUEUE_TIME) > (7*24*60*60*1000))
);

#ANALYZE TABLE TRANSFER_HISTORY PERSISTENT FOR ALL;

##
## Delete the Publication entries which are
## associated to an expired data transfer
##
CHUNK 1000 DELETE FROM PUBLICATION
  WHERE PUB_ID IN (
    SELECT PUB_ID FROM PUBLICATION PUB, DATA_TRANSFER DAT
	WHERE PUB.DAT_ID = DAT.DAT_ID
    AND DAT_DELETED<>0
    AND ((DAT_EXPIRY_TIME - DAT_SCHEDULED_TIME) < (60*60*1000)
      OR ($currentTimeMillis - DAT_QUEUE_TIME) > (7*24*60*60*1000))
);


#ANALYZE TABLE PUBLICATION PERSISTENT FOR ALL;

##
## Delete the DataTransfers which have an
## expiration date which is less than one
## hour (acquisition) or which are more
## than 1 week after being queued
## (the acquisition might keep track of
## files for at least 3 weeks).
##
CHUNK 1000 DELETE FROM DATA_TRANSFER
  WHERE DAT_ID IN (
    SELECT DAT_ID FROM DATA_TRANSFER
    WHERE (DAT_DELETED<>0)
    AND ((DAT_EXPIRY_TIME - DAT_SCHEDULED_TIME) < (60*60*1000)
      OR ($currentTimeMillis - DAT_QUEUE_TIME) > (7*24*60*60*1000))
    AND NOT DAT_ID IN (SELECT DAT_ID FROM TRANSFER_HISTORY)
);

#ANALYZE TABLE DATA_TRANSFER PERSISTENT FOR ALL;

CHUNK 1000 DELETE FROM METADATA_VALUE
  WHERE DAF_ID IN (
    SELECT DAF_ID FROM DATA_FILE
    WHERE DAF_REMOVED
    AND NOT (DAF_ID IN (
      SELECT DAF_ID
      FROM DATA_TRANSFER))
);

#ANALYZE TABLE METADATA_VALUE PERSISTENT FOR ALL;

CHUNK 1000 DELETE FROM DATA_FILE
  WHERE DAF_ID IN (
    SELECT DAF_ID FROM DATA_FILE
    WHERE DAF_REMOVED
    AND NOT (DAF_ID IN (
      SELECT DAF_ID
      FROM DATA_TRANSFER))
    AND NOT (DAF_ID IN (
      SELECT DAF_ID
      FROM METADATA_VALUE))
);

#ANALYZE TABLE DATA_FILE PERSISTENT FOR ALL;

CHUNK 1000 DELETE FROM MONITORING_VALUE
  WHERE MOV_ID IN (
    SELECT MOV_ID FROM MONITORING_VALUE
    WHERE MOV_ID < ((SELECT MAX(MOV_ID) FROM MONITORING_VALUE) - 1000)
    AND (SELECT COUNT(*) FROM DATA_TRANSFER DT WHERE DT.MOV_ID = MONITORING_VALUE.MOV_ID) = 0
    AND (SELECT COUNT(*) FROM DATA_FILE DF WHERE DF.MOV_ID = MONITORING_VALUE.MOV_ID) = 0
);

#ANALYZE TABLE MONITORING_VALUE PERSISTENT FOR ALL;

## Delete events older than 10 days.
##
CHUNK 1000 DELETE FROM EVENT
  WHERE EVE_ID IN (
    SELECT EVE_ID FROM EVENT
    WHERE DATE_SUB(CURDATE(),INTERVAL 10 DAY) > EVE_DATE
);

#ANALYZE TABLE EVENT PERSISTENT FOR ALL;

CHUNK 1000 DELETE FROM ACTIVITY
  WHERE ACT_ID IN (
    SELECT ACT_ID FROM ACTIVITY
    WHERE NOT (EXISTS (SELECT * FROM EVENT WHERE EVENT.ACT_ID = ACTIVITY.ACT_ID))
);

#ANALYZE TABLE ACTIVITY PERSISTENT FOR ALL;

## Delete all the upload history which are more than 1 week old.
CHUNK 1000 DELETE FROM UPLOAD_HISTORY
  WHERE UPH_ID IN (
    SELECT UPH_ID FROM UPLOAD_HISTORY
    WHERE UPH_QUEUE_TIME < ($currentTimeMillis-(7*60*60*24*1000))
);

#ANALYZE TABLE UPLOAD_HISTORY PERSISTENT FOR ALL;

## Delete all the incoming history which are more than 1 week old.
CHUNK 1000 DELETE FROM INCOMING_HISTORY
  WHERE INH_ID IN (
    SELECT INH_ID FROM INCOMING_HISTORY
    WHERE INH_SCHEDULED_TIME < ($currentTimeMillis-(7*60*60*24*1000))
);

#ANALYZE TABLE INCOMING_HISTORY PERSISTENT FOR ALL;

## Delete all the product status which are
## more than 2 weeks old.
CHUNK 1000 DELETE FROM PRODUCT_STATUS
  WHERE PRS_ID IN (
    SELECT PRS_ID FROM PRODUCT_STATUS
    WHERE PRS_LAST_UPDATE < ($currentTimeMillis-(14*60*60*24*1000))
);

#ANALYZE TABLE PRODUCT_STATUS PERSISTENT FOR ALL;

## Delete all SCHEDULER_VALUE which are not linked to any Destination
CHUNK 1000 DELETE FROM SCHEDULER_VALUE
  WHERE SCV_ID IN (
	SELECT SCV_ID FROM SCHEDULER_VALUE
    WHERE NOT SCV_ID in (SELECT SCV_ID from DESTINATION)
);

## Delete all HOST_OUTPUT which are not linked to any HOST
CHUNK 1000 DELETE FROM HOST_OUTPUT
  WHERE HOU_ID IN (
    SELECT HOU_ID FROM HOST_OUTPUT
    WHERE NOT HOU_ID in (SELECT HOU_ID from HOST)
);

## Delete all HOST_STATS which are not linked to any HOST
CHUNK 1000 DELETE FROM HOST_STATS
  WHERE HST_ID IN (
    SELECT HST_ID FROM HOST_STATS
    WHERE NOT HST_ID in (SELECT HST_ID from HOST)
);

## Delete all HOST_LOCATION which are not linked to any HOST
CHUNK 1000 DELETE FROM HOST_LOCATION
  WHERE HLO_ID IN (
    SELECT HLO_ID FROM HOST_LOCATION
    WHERE NOT HLO_ID in (SELECT HLO_ID from HOST)
);

## Delete all PUBLICATION which have been already processed
CHUNK 1000 DELETE FROM PUBLICATION
  WHERE PUB_ID IN (
    SELECT PUB_ID FROM PUBLICATION
    WHERE PUB_DONE <> 0
);

## Delete all BANDWIDTH which are not linked to any DESTINATION
CHUNK 1000 DELETE FROM BANDWIDTH
  WHERE DES_NAME IN (
    SELECT DES_NAME FROM BANDWIDTH
    WHERE NOT DES_NAME in (SELECT DES_NAME from DESTINATION)
);

## Compute the bandwidth (make sure that we have not yet computed the bandwidth before to avoid duplicates)
INSERT INTO BANDWIDTH SELECT
  DES_NAME,
  DATE_FORMAT(FROM_UNIXTIME(DAT_START_TIME/1000),'%Y-%m-%d') AS BAN_DATE,
  SUM(DAT_SENT) AS BAN_BYTES,
  SUM(DAT_DURATION) AS BAN_DURATION,
  COUNT(*) AS BAN_FILES
FROM
  DATA_TRANSFER
WHERE
  (SELECT COUNT(*) FROM BANDWIDTH WHERE BAN_DATE = DATE_FORMAT(DATE(NOW()-INTERVAL 1 DAY), '%Y-%m-%d')) = 0
  AND FROM_UNIXTIME(DAT_START_TIME/1000,'%Y-%m-%d') = DATE_FORMAT(DATE(NOW()-INTERVAL 1 DAY), "%Y-%m-%d")  
  AND STA_CODE = 'DONE'
GROUP BY
  BAN_DATE,
  DES_NAME;
