#!/bin/sh

#
# File monitor
#
# Purpose: Monitor startup script (OpenECPDS)
#
# (c) Copyright ECMWF 2003-2022 - Laurent Gougeon (syi@ecmwf.int)
#

##########################
## Load configuration file
##########################
source /usr/local/ecpds/monitor/sh/ecenv

##########################################
## Load local configuration files from etc
##########################################
for envfile in default/monitor.cnf monitor.cnf; do
  if [ -f /etc/ecpds/$envfile ]; then
    source /etc/ecpds/$envfile
  fi
done

###########################
## Java command and options
###########################
JAVA_OPTS="-server -XX:+CrashOnOutOfMemoryError -XX:+HeapDumpOnOutOfMemoryError \
  -XX:HeapDumpPath='$dir_log' -Xms$ALLOCATED_MEMORY -Xmx$ALLOCATED_MEMORY \
  -Xlog:gc*:file='$dir_log/monitor-gc.log':time,uptime,tags:filesize=100M,filecount=5 \
  -XX:+DisableExplicitGC "$JAVA_OPTS

####################
## Set the classpath
####################
for n in `$find $dir_lib/*.jar`; do
  STARTERPATH=$STARTERPATH":"$n
done

###################################################
## Local options (to be configured on each monitor)
###################################################
JAVA_OPTS=$JAVA_OPTS" -Decaccess.hostName='$EXTERNAL_ADDRESS'"
JAVA_OPTS=$JAVA_OPTS" -Dmonitor.internalAddress='$INTERNAL_ADDRESS'"
JAVA_OPTS=$JAVA_OPTS" -Dmaster.address='$MASTER_ADDRESS'"
JAVA_OPTS=$JAVA_OPTS" -Dkeystore.password='$KEYSTORE_PASSWORD'"
JAVA_OPTS=$JAVA_OPTS" -Dmonitor.useCache='$USE_CACHE'"
JAVA_OPTS=$JAVA_OPTS" -Dmaster.urlList='$MASTER_URL_LIST'"
JAVA_OPTS=$JAVA_OPTS" -DdefaultSourceHostId='$DEFAULT_SOURCE_HOST_ID'"
JAVA_OPTS=$JAVA_OPTS" -Dmonitor.nickName='$MONITOR_NICKNAME'"
JAVA_OPTS=$JAVA_OPTS" -Dmonitor.title='$MONITOR_TITLE'"
JAVA_OPTS=$JAVA_OPTS" -Dmonitor.color='$MONITOR_COLOR'"
JAVA_OPTS=$JAVA_OPTS" -Dport.callback='$PORT_CALLBACK'"
JAVA_OPTS=$JAVA_OPTS" -Dport.https='$PORT_HTTPS'"
JAVA_OPTS=$JAVA_OPTS" -Dport.master='$PORT_MASTER'"

#######################################################
## Deal with roll-over strategy and level for log files
#######################################################
[ ! -z "$LOG_ROLLOVER_SIZE_MAX" ] && JAVA_OPTS=$JAVA_OPTS" -Dlog.rollover.size.max='$LOG_ROLLOVER_SIZE_MAX'"
[ ! -z "$LOG_ROLLOVER_SIZE_KEEP" ] && JAVA_OPTS=$JAVA_OPTS" -Dlog.rollover.size.keep='$LOG_ROLLOVER_SIZE_KEEP'"
[ ! -z "$LOG_LEVEL" ] && JAVA_OPTS=$JAVA_OPTS" -Dlog.ecmwf.level='$LOG_LEVEL'"

#####################
## Export directories
#####################
JAVA_OPTS=$JAVA_OPTS" -Dmonitor.etc='$dir_etc'"
JAVA_OPTS=$JAVA_OPTS" -Dmonitor.htdocs='$dir_htdocs'"
JAVA_OPTS=$JAVA_OPTS" -Dmonitor.conf='$dir_conf'"
JAVA_OPTS=$JAVA_OPTS" -Dmonitor.lib='$dir_lib'"
JAVA_OPTS=$JAVA_OPTS" -Dmonitor.sh='$dir_sh'"
JAVA_OPTS=$JAVA_OPTS" -Dmonitor.log='$dir_log'"
JAVA_OPTS=$JAVA_OPTS" -Dmonitor.tmp='$dir_tmp'"

#################
## Global options
#################
JAVA_OPTS=$JAVA_OPTS" -Decmwf.properties='$dir_conf/ecmwf.properties'"
JAVA_OPTS=$JAVA_OPTS" -Dlog4j2.configurationFile='$dir_conf/log4j2.properties'"
JAVA_OPTS=$JAVA_OPTS" -Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"
JAVA_OPTS=$JAVA_OPTS" -Djava.security.policy='$dir_conf/ecmwf.policy'"
JAVA_OPTS=$JAVA_OPTS" -Dorg.apache.commons.logging.Log=org.apache.commons.logging.impl.Log4JLogger"
JAVA_OPTS=$JAVA_OPTS" -Dorg.mortbay.http.Version.paranoid=true"
JAVA_OPTS=$JAVA_OPTS" -Djava.io.tmpdir='$dir_tmp'"
JAVA_OPTS=$JAVA_OPTS" -Djava.awt.headless=true"
JAVA_OPTS=$JAVA_OPTS" -Dfile.encoding=UTF8"
JAVA_OPTS=$JAVA_OPTS" -Duser.timezone=GMT"

##################
## Starter options
##################
JAVA_OPTS=$JAVA_OPTS" -Decmwf.common.starter.properties='$dir_conf/starter.properties'"
JAVA_OPTS=$JAVA_OPTS" -Decmwf.common.starter.listenAddress='$INTERNAL_ADDRESS'"
JAVA_OPTS=$JAVA_OPTS" -Decmwf.common.starter.port='$PORT_JMX'"
JAVA_OPTS=$JAVA_OPTS" -Decmwf.common.starter.name=ecmwf.common.ecaccess.HandlerServer"
JAVA_OPTS=$JAVA_OPTS" -Decmwf.common.starter.domain=ECpdsMonitor"
JAVA_OPTS=$JAVA_OPTS" -Decmwf.common.starter.conf='$dir_conf'"
JAVA_OPTS=$JAVA_OPTS" -Decmwf.common.starter.ext='$dir_lib/ext'"
JAVA_OPTS=$JAVA_OPTS" -Decmwf.common.starter.tmp='$dir_tmp'"
JAVA_OPTS=$JAVA_OPTS" -Decmwf.common.starter.debug=no"

##############
## RMI options
##############
JAVA_OPTS=$JAVA_OPTS" -Djava.rmi.server.randomIDs=true"
JAVA_OPTS=$JAVA_OPTS" -Djava.rmi.server.disableHttp=true"
JAVA_OPTS=$JAVA_OPTS" -Djava.rmi.server.useCodebaseOnly=true"

################################################################
## Deal with the remote stubs for locally created remote objects
################################################################
if [ "$INTERNAL_ADDRESS" != "0.0.0.0" -a "$INTERNAL_ADDRESS" != "::" ]; then
  JAVA_OPTS=$JAVA_OPTS" -Djava.rmi.server.hostname='$INTERNAL_ADDRESS'"
fi

#############################################
## Remove reflective access warning for sling
#############################################
JAVA_OPTS=$JAVA_OPTS" --add-opens java.base/java.lang=ALL-UNNAMED"

#########################################
## Let's find out if the pid is available
#########################################
if [ -z "$CONTAINER" ]; then
  if [ -f "$dir_tmp/monitor.pid" ]; then
    monitor=`$cat $dir_tmp/monitor.pid`
  fi
else
  monitor=`$pidof java`
fi

######################
## Is is still running
######################
if [ -n "$monitor" ] && [ "`$ps -q $monitor -o comm=`" != "java" ]; then
  if [ -z "$CONTAINER" ]; then
    $echo "Removing leftover monitor.[pid|ini] (pid=$monitor)"
    $rm -f $dir_tmp/monitor.pid
    $rm -f $dir_tmp/monitor.ini
  fi
  monitor=
fi

###############################
## Perform the requested action
###############################
case "$1" in
  ###########################
  ## Start the monitor daemon
  ###########################
  start)
    if [ "$monitor" != "" ]; then
      $echo "The monitor daemon is already running (pid=$monitor)"
      exit 1
    fi
    $ulimit unlimited
    $echo "Cleaning tmp directory"
    $rm -fr $dir_tmp/jetty-*-ecpds_war-*
    if [ -z "$CONTAINER" ]; then
      $echo "Starting the monitor daemon"
      $echo $JAVA_OPTS -cp "$STARTERPATH" ecmwf.common.starter.Starter > $dir_tmp/monitor.ini
      $nohup $java @$dir_tmp/monitor.ini >> $dir_log/monitor.output 2>&1 &
      $echo $! > $dir_tmp/monitor.pid
      exit 0
    else
      $echo "Executing the monitor process (container=$CONTAINER)"
      JAVA_OPTS=$JAVA_OPTS" -Dlog.console.threshold.level=$CONSOLE_LOG_LEVEL"
      $echo $JAVA_OPTS -cp "$STARTERPATH" ecmwf.common.starter.Starter > $dir_tmp/monitor.ini
      exec $java @$dir_tmp/monitor.ini 2>&1
    fi
    ;;
  ##########################
  ## Stop the monitor daemon
  ##########################
  stop)
    if [ -n "$CONTAINER" ]; then
      $echo "Operation not permitted from container"
      exit 1
    fi
    if [ "$monitor" != "" ]; then
      $echo "Stopping the monitor daemon"
      $kill -9 $monitor > /dev/null 2>&1
      $rm -f $dir_tmp/monitor.pid
      $rm -f $dir_tmp/monitor.ini
      exit 0
    else
      $echo "The monitor daemon is NOT running"
      exit 1
    fi
    ;;
  #############################
  ## Restart the monitor daemon
  #############################
  restart)
    if [ -n "$CONTAINER" ]; then
      $echo "Operation not permitted from container"
      exit 1
    fi
    $0 stop
    $0 start
    ;;
  #################################
  ## Dump threads to monitor output
  #################################
  dump)
    if [ "$monitor" != "" ]; then
      $echo "Creating monitor thread dump (~2s)"
      $kill -QUIT $monitor > /dev/null 2>&1
      $sleep 2
      exit 0
    else
      $echo "The monitor daemon is NOT running"
      exit 1
    fi
    ;;
  ###############################
  ## Check the the monitor daemon
  ###############################
  status)
    if [ "$monitor" != "" ]; then
      fdc=`$ls /proc/$monitor/fd | $wc -l`
      $echo "The monitor daemon is running (pid=$monitor,fdc=$fdc)"
      exit 0
    else
      $echo "The monitor daemon is NOT running"
      exit 1
    fi
    ;;
  ############################
  ## Check the monitor version
  ############################
  version)
    VERSION=`$java -cp $dir_lib/ext/master.jar ecmwf.common.version.Version`
    $echo "The monitor version is $VERSION"
    ;;
  ###############################
  ## Unknown option: display help
  ###############################
  *)
    if [ "$1" != "" ]; then
      $echo "unknown option "$1
    fi
    $echo "usage: monitor [start|stop|restart|dump|status|version]"
    exit 1
    ;;
esac
